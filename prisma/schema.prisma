// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
}

generator prismaClassGenerator {
  provider                = "prisma-class-generator"
  output                  = "../src/core/entities"
  useSwagger              = "false"
  dryRun                  = "false"
  separateRelationFields  = "true"
  makeIndexFile           = "false"
  preserveDefaultNullable = "false"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  document  String   @unique
  wallet    Wallet?
  createdAt DateTime @default(now())
}

model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  balance      Float         @default(0)
  updatedAt    DateTime?
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  walletBankAccount WalletBankAccount?
}

model Transaction {
  id                 String   @id @default(uuid())
  walletId           String
  type               TransactionType
  amount             Float
  status             TransactionStatus
  endToEndId         String
  endToEndIdOriginal String?
  updatedAt          DateTime?
  createdAt          DateTime @default(now())
  wallet             Wallet   @relation(fields: [walletId], references: [id])
}

model WalletBankAccount {
  id             String   @id @default(uuid())
  walletId       String   @unique
  ispb           String
  branchCode     String?
  accountNumber  String
  accountType    String
  updatedAt      DateTime?
  createdAt      DateTime @default(now())
  wallet         Wallet   @relation(fields: [walletId], references: [id])
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
